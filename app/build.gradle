apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'

Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)

def key_keyAlias = properties.getProperty('key.alias')
def key_keyPassword = properties.getProperty('store.password')
def key_storePassword = properties.getProperty('store.password')
def map_api_key = properties.getProperty('map.api.key')

kapt {
    correctErrorTypes = true
}


androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 29
//    buildToolsVersion "26.0.3"
    ndkVersion "22.1.7171670"
    defaultConfig {
        applicationId "com.kennah.wecatch"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.1.3"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang'
            }
        }
        ndk {
            moduleName 'secret_lib'
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }

        multiDexEnabled true

    }

    signingConfigs {
        release {
            storeFile file('keystore/key.jks')
            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//            resValue "string", "map_api_key", map_api_key
        }
        debug {
//            resValue "string", "map_api_key", map_api_key
        }
    }

    buildFeatures {
        viewBinding true
    }

//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//        }
//    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
}

kotlin { experimental { coroutines 'enable' } }

def support = '28.0.0'
def play = '11.2.0'
def retrofit = '2.3.0'
def logger = '4.9.1'
def anko = '0.10.8'
def butterKnife = '8.8.1'
def dagger = '2.11'
def permission = '4.8.0'
def glide = '4.1.1'

repositories {
    maven {
        url "https://jitpack.io"
    }
    jcenter()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.multidex:multidex:2.0.0'

//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.google.android.gms:play-services-maps:${play}"
    implementation("com.google.android.gms:play-services-location:${play}") {
        exclude group: 'com.google.android.gms'
    }
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation 'org.osmdroid:osmdroid-android:5.6.5@aar'

    implementation "org.jetbrains.anko:anko:${anko}"
    implementation "org.jetbrains.anko:anko-coroutines:${anko}"

    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation("com.squareup.retrofit2:converter-jackson:${retrofit}") {
        exclude group: 'com.square.retrofit2'
    }

    implementation "com.squareup.okhttp3:logging-interceptor:${logger}"

    implementation "com.jakewharton:butterknife:${butterKnife}"
    kapt "com.jakewharton:butterknife-compiler:${butterKnife}"

    implementation "com.google.dagger:dagger:${dagger}"
    implementation "com.google.dagger:dagger-android-support:${dagger}"
    kapt "com.google.dagger:dagger-android-processor:${dagger}"
    kapt "com.google.dagger:dagger-compiler:${dagger}"

    implementation("com.github.permissions-dispatcher:permissionsdispatcher:${permission}") {
        // if you don't use android.app.Fragment you can exclude support for them
//        exclude module: "support-v13"
    }
//    kapt "com.github.hotchemi:permissionsdispatcher-processor:${permission}"
    kapt "com.github.permissions-dispatcher:permissionsdispatcher-processor:${permission}"
    implementation 'org.hashids:hashids:1.0.1'

    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'

    implementation ('io.reactivex.rxjava2:rxandroid:2.0.1') {
        exclude group: "io.reactivex.rxjava2"
    }

    implementation ('com.afollestad.material-dialogs:core:0.9.4.7') {
        exclude group: "com.android.support"
    }

    implementation 'com.squareup:otto:1.3.8'

    implementation "com.github.bumptech.glide:glide:${glide}"
    kapt "com.github.bumptech.glide:compiler:${glide}"


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
}
